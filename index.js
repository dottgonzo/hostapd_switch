"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Promise = require("bluebird");
var pathExists = require("path-exists");
var dnsmasqconf = require("dnsmasq-conf");
var json_add_1 = require("json-add");
var promise_test_connection_1 = require('promise-test-connection');
var wpasupplicant_manager_1 = require('wpasupplicant-manager');
var listwificlients_1 = require("listwificlients");
var netw_1 = require("netw");
var verb = require('verbo');
var exec = require('promised-exec');
var hostapdjs_1 = require("hostapdjs");
function testconn(d, testint) {
    return new Promise(function (resolve, reject) {
        netw_1.default().then(function (n) {
            var dev = false;
            var ip = false;
            for (var ns = 0; ns < n.length; ns++) {
                if (n[ns].interface == d) {
                    dev = d;
                    if (n[ns].ip) {
                        ip = n[ns].ip;
                    }
                }
            }
            if (!dev) {
                reject('no interface');
            }
            else if (!ip) {
                reject(dev + ' can\'t get an ip address');
            }
            else {
                if (testint) {
                    promise_test_connection_1.default().then(function () {
                        resolve(true);
                    }).catch(function (err) {
                        reject(err);
                    });
                }
                else {
                    console.log("no internet test");
                    resolve(true);
                }
            }
        }).catch(function (err) {
            reject('netw' + err);
        });
    });
}
;
;
;
;
;
;
;
var HostapdSwitch = (function (_super) {
    __extends(HostapdSwitch, _super);
    function HostapdSwitch(options, init) {
        var config = {
            interface: "wlan0",
            wpasupplicant_path: "/etc/wpa_supplicant/wpa_supplicant.conf",
            redirect: true,
            hostapd: { interface: "wlan0", wpa_passphrase: false, ssid: "hapd111" },
            dnsmasq: { interface: "wlan0" },
            init: false
        };
        json_add_1.default(config, options);
        if (config.interface !== 'auto' && (!options || !options.hostapd || !options.hostapd.interface) && (!options || !options.dnsmasq || !options.dnsmasq.interface)) {
            config.hostapd.interface = config.interface;
            config.dnsmasq.interface = config.interface;
        }
        if (!pathExists.sync('/etc/default/hostapd')) {
            throw Error('no default conf file was founded for hostapd');
        }
        if (!config.hostapd.ssid) {
            throw Error('No ssid was provided');
        }
        if (!config.hostapd.wpa_passphrase) {
            throw Error('No wpa_passphrase was provided');
        }
        _super.call(this, config.wpasupplicant_path);
        this.config = config;
        this.dnsmasq = new dnsmasqconf(config.dnsmasq);
        if (init) {
            hostapdjs_1.default(config.hostapd).then(function () {
                console.log('hostapd is now configured');
            });
        }
        ;
    }
    ;
    HostapdSwitch.prototype.host = function (e) {
        var that = this;
        var dnsmasq = this.dnsmasq;
        var hostIp = dnsmasq.hostIp;
        var cmd = 'ifconfig ' + this.config.interface + ' down && sleep 2 ; pkill wpa_supplicant && systemctl restart hostapd ; systemctl restart dnsmasq && ifconfig ' + this.config.interface + ' ' + hostIp + ' netmask 255.255.255.0 up && sleep 5';
        return new Promise(function (resolve, reject) {
            dnsmasq.host().then(function () {
                exec(cmd).then(function () {
                    exec('iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination ' + hostIp + ':80 && iptables -t nat -A PREROUTING -p tcp --dport 443 -j DNAT --to-destination ' + hostIp + ':80').then(function () {
                        that.wifimode = "host";
                        resolve(true);
                    }).catch(function (err) {
                        verb(err, 'error', 'hostapd_switch ipfilter host switch');
                    });
                }).catch(function (err) {
                    verb(err, 'error', 'hostapd_switch executing host switch');
                });
            }).catch(function (err) {
                verb(err, 'error', 'hostapd_switch executing dnsmasq host switch');
            });
        });
    };
    ;
    HostapdSwitch.prototype.ap = function (e) {
        var that = this;
        var dnsmasq = this.dnsmasq;
        var hostIp = dnsmasq.hostIp;
        var cmd = 'ifconfig ' + this.config.interface + ' down && sleep 2 ; pkill wpa_supplicant && systemctl restart hostapd ; systemctl restart dnsmasq && ifconfig ' + this.config.interface + ' ' + hostIp + ' netmask 255.255.255.0 up && for i in $( iptables -t nat --line-numbers -L | grep ^[0-9] | awk \'{ print $1 }\' | tac ); do iptables -t nat -D PREROUTING $i; done';
        return new Promise(function (resolve, reject) {
            dnsmasq.ap().then(function () {
                exec(cmd).then(function () {
                    that.wifimode = "ap";
                    resolve(true);
                }).catch(function (err) {
                    verb(err, 'error', 'hostapd_switch executing ap switch');
                });
            }).catch(function (err) {
                verb(err, 'error', 'hostapd_switch executing dnsmasq before ap switch');
            });
        });
    };
    ;
    HostapdSwitch.prototype.client = function (testnetw, testint) {
        var that = this;
        var dev = this.config.interface;
        var driver;
        if (this.config.hostapd.driver === 'nl80211') {
            driver = 'nl80211';
        }
        else {
            driver = 'wext';
        }
        var cmd = 'ifconfig ' + dev + ' down && sleep 2 ; pkill wpa_supplicant ;  dhclient -r ' + dev + ' ; systemctl stop hostapd ; systemctl stop dnsmasq ; sleep 2; ifconfig ' + dev + ' up && wpa_supplicant -B -i ' + dev + ' -c ' + this.config.wpasupplicant_path + ' -D ' + driver + ' && dhclient ' + dev + ' && for i in $( iptables -t nat --line-numbers -L | grep ^[0-9] | awk \'{ print $1 }\' | tac ); do iptables -t nat -D PREROUTING $i; done; sleep 10';
        return new Promise(function (resolve, reject) {
            exec(cmd).then(function () {
                that.wifimode = "client";
                if (testnetw) {
                    testconn(dev, testint).then(function (answer) {
                        resolve(answer);
                    }).catch(function (err) {
                        reject(err);
                    });
                }
                else {
                    resolve(true);
                }
            }).catch(function (err) {
                verb(err, 'warn', 'hostapd_switch exec');
                if (testnetw) {
                    testconn(dev, testint).then(function (answer) {
                        resolve(answer);
                    }).catch(function (err) {
                        reject(err);
                    });
                }
                else {
                    resolve(true);
                }
            });
        });
    };
    ;
    HostapdSwitch.prototype.listwificlients = function () {
        var that = this;
        return new Promise(function (resolve, reject) {
            if (that.wifimode === 'host' || that.wifimode === 'ap') {
                listwificlients_1.default(that.config.interface).then(function (a) {
                    resolve(a);
                }).catch(function (err) {
                    reject(err);
                });
            }
            else {
                reject('wifimode is ' + that.wifimode);
            }
        });
    };
    return HostapdSwitch;
}(wpasupplicant_manager_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = HostapdSwitch;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUNyRCx5QkFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBQztvQkFDMUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUNkLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFDLEdBQUc7b0JBQ1QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO2dCQUNmLENBQUMsQ0FBQyxDQUFBO1lBQ04sQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE1BQU0sQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQzFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFJTCxvQkFBQztBQUFELENBMUpBLEFBMEpDLENBMUowQywrQkFBVSxHQTBKcEQ7QUExSkQ7K0JBMEpDLENBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCAqIGFzIFByb21pc2UgZnJvbSBcImJsdWViaXJkXCI7XG5pbXBvcnQgKiBhcyBwYXRoRXhpc3RzIGZyb20gXCJwYXRoLWV4aXN0c1wiO1xuaW1wb3J0ICogYXMgZG5zbWFzcWNvbmYgZnJvbSBcImRuc21hc3EtY29uZlwiO1xuaW1wb3J0IG1lcmdlIGZyb20gXCJqc29uLWFkZFwiO1xuaW1wb3J0IHRlc3RpbnRlcm5ldCBmcm9tICdwcm9taXNlLXRlc3QtY29ubmVjdGlvbic7XG5pbXBvcnQgd3BhbWFuYWdlciBmcm9tICd3cGFzdXBwbGljYW50LW1hbmFnZXInO1xuaW1wb3J0IGxpc3R3aWZpY2xpZW50cyBmcm9tIFwibGlzdHdpZmljbGllbnRzXCJcblxuaW1wb3J0IG5ldHcgZnJvbSBcIm5ldHdcIjtcbmNvbnN0IHZlcmIgPSByZXF1aXJlKCd2ZXJibycpO1xuY29uc3QgZXhlYyA9IHJlcXVpcmUoJ3Byb21pc2VkLWV4ZWMnKTtcbmltcG9ydCBob3N0YXBkY29uZiBmcm9tIFwiaG9zdGFwZGpzXCI7XG5cbmludGVyZmFjZSBJU2NhbiB7XG4gICAgZXNzaWQ6IHN0cmluZztcbiAgICBtYWM6IHN0cmluZztcbiAgICBzaWduYWw6IHN0cmluZztcbn1cblxudHlwZSBJTmV0d29ya1R5cGUgPSAnd2lmaScgfCAnd2lyZWQnXG5cbmludGVyZmFjZSBJTmV0d29yayB7XG4gICAgdHlwZTogSU5ldHdvcmtUeXBlO1xuICAgIG1hYzogc3RyaW5nO1xuICAgIGludGVyZmFjZTogc3RyaW5nO1xuICAgIGVzc2lkPzogc3RyaW5nO1xuICAgIHNjYW4/OiBJU2NhbltdO1xuICAgIGlwPzogc3RyaW5nO1xuICAgIGdhdGV3YXk/OiBzdHJpbmc7XG59XG5cblxudHlwZSBJd2lmaW1vZGUgPSAnYXAnIHwgJ2hvc3QnIHwgJ2NsaWVudCcgfCAndW5tYW5hZ2VkJ1xuXG5cbmludGVyZmFjZSBJV2lmaUNsaWVudCB7XG4gICAgbWFjOiBzdHJpbmc7XG4gICAgc2lnbmFsOiBzdHJpbmc7XG4gICAgc2lnbmFsTWluPzogc3RyaW5nO1xuICAgIHNpZ25hbE1heD86IHN0cmluZztcblxufVxuXG5mdW5jdGlvbiB0ZXN0Y29ubihkOiBzdHJpbmcsIHRlc3RpbnQ/OiBib29sZWFuKSB7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2U8Ym9vbGVhbj4oZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBuZXR3KCkudGhlbihmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgbGV0IGRldjogYW55ID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgaXA6IGFueSA9IGZhbHNlO1xuXG5cblxuICAgICAgICAgICAgZm9yIChsZXQgbnMgPSAwOyBucyA8IG4ubGVuZ3RoOyBucysrKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5bbnNdLmludGVyZmFjZSA9PSBkKSB7XG5cblxuICAgICAgICAgICAgICAgICAgICBkZXYgPSBkO1xuICAgICAgICAgICAgICAgICAgICBpZiAobltuc10uaXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlwID0gbltuc10uaXBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgIGlmIChuLm5ldHdvcmtzW25zXS5nYXRld2F5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgZ3cgPSBuLm5ldHdvcmtzW25zXS5nYXRld2F5XG4gICAgICAgICAgICAgICAgICAgIC8vICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWRldikge1xuICAgICAgICAgICAgICAgIHJlamVjdCgnbm8gaW50ZXJmYWNlJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFpcCkge1xuICAgICAgICAgICAgICAgIHJlamVjdChkZXYgKyAnIGNhblxcJ3QgZ2V0IGFuIGlwIGFkZHJlc3MnKTtcbiAgICAgICAgICAgICAgICAvLyAgfSBlbHNlIGlmICghZ3cpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgcmVqZWN0KGRldiArICcgaGFzIG5vIGdhdGV3YXknKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGVzdGludCkge1xuICAgICAgICAgICAgICAgICAgICB0ZXN0aW50ZXJuZXQoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibm8gaW50ZXJuZXQgdGVzdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KCduZXR3JyArIGVycik7XG4gICAgICAgIH0pXG4gICAgfSlcblxufVxuXG5pbnRlcmZhY2UgSUhvc3RhcGQge1xuICAgIGludGVyZmFjZTogc3RyaW5nO1xuICAgIHNzaWQ6IHN0cmluZztcbiAgICB3cGFfcGFzc3BocmFzZTogYW55O1xuICAgIGRyaXZlcj86IHN0cmluZztcbn07XG5cbmludGVyZmFjZSBJSG9zdGFwZENmIHtcbiAgICBkcml2ZXI/OiBzdHJpbmc7XG4gICAgc3NpZD86IHN0cmluZztcbiAgICB3cGFfcGFzc3BocmFzZT86IHN0cmluZztcbiAgICBpbnRlcmZhY2U/OiBzdHJpbmc7XG5cbn07XG5cbmludGVyZmFjZSBJRG5zbWFzcSB7XG4gICAgaW50ZXJmYWNlOiBzdHJpbmc7XG59O1xuXG5pbnRlcmZhY2UgSURuc21hc3FDZiB7XG4gICAgaW50ZXJmYWNlPzogc3RyaW5nO1xufTtcblxuaW50ZXJmYWNlIElDbGFzc09wdCB7XG4gICAgaW50ZXJmYWNlPzogc3RyaW5nO1xuICAgIHdwYXN1cHBsaWNhbnRfcGF0aD86IHN0cmluZztcbiAgICBob3N0YXBkPzogSUhvc3RhcGRDZjtcbiAgICByZWRpcmVjdD86IGJvb2xlYW47XG4gICAgZG5zbWFzcT86IElEbnNtYXNxQ2Y7XG59O1xuXG5pbnRlcmZhY2UgSUNsYXNzQ29uZiB7XG4gICAgaW50ZXJmYWNlOiBzdHJpbmc7XG4gICAgd3Bhc3VwcGxpY2FudF9wYXRoOiBzdHJpbmc7XG4gICAgaG9zdGFwZDogSUhvc3RhcGQ7XG4gICAgZG5zbWFzcTogSURuc21hc3E7XG4gICAgaW5pdDogYm9vbGVhbjtcbiAgICByZWRpcmVjdDogYm9vbGVhbjtcbn07XG5cbmludGVyZmFjZSBJRG5zTW9kZXMge1xuICAgIGFwOiBJRG5zTW9kZTtcbiAgICBsaW5rOiBJRG5zTW9kZTtcbiAgICBob3N0OiBJRG5zTW9kZVxufTtcblxuaW50ZXJmYWNlIElEbnNNb2RlIHtcbiAgICBub3Jlc29sdjogYm9vbGVhbixcbiAgICBkbnM6IFtzdHJpbmddLFxuICAgIGRoY3A6IHtcbiAgICAgICAgc3RvcDogbnVtYmVyO1xuICAgICAgICBzdGFydDogbnVtYmVyO1xuICAgICAgICBsZWFzZTogc3RyaW5nO1xuICAgIH07XG4gICAgaG9zdElwOiBzdHJpbmcsXG4gICAgdGVzdDogYm9vbGVhbixcbiAgICBpbnRlcmZhY2U6IGFueSxcbiAgICBhZGRyZXNzPzogc3RyaW5nXG59XG5cblxuXG5pbnRlcmZhY2UgSURucyB7XG4gICAgbW9kZXM6IElEbnNNb2RlcztcbiAgICBtb2RlPzogc3RyaW5nO1xuICAgIHBhdGg6IHN0cmluZztcbiAgICBpbnRlcmZhY2U6IGFueTtcbiAgICB0ZXN0OiBib29sZWFuO1xuICAgIGRoY3A6IHtcbiAgICAgICAgc3RvcDogbnVtYmVyO1xuICAgICAgICBzdGFydDogbnVtYmVyO1xuICAgICAgICBsZWFzZTogc3RyaW5nO1xuICAgIH07XG4gICAgZG5zOiBbc3RyaW5nXTtcbiAgICBob3N0SXA6IHN0cmluZztcbiAgICBhcDogRnVuY3Rpb247XG4gICAgaG9zdDogRnVuY3Rpb247XG4gICAgbGluazogRnVuY3Rpb247XG4gICAgc2V0bW9kZShzdHJpbmcpO1xufVxuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhvc3RhcGRTd2l0Y2ggZXh0ZW5kcyB3cGFtYW5hZ2VyIHtcbiAgICBjb25maWc6IElDbGFzc0NvbmY7XG4gICAgZG5zbWFzcTogSURucztcbiAgICB3aWZpbW9kZTogSXdpZmltb2RlO1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogSUNsYXNzT3B0LCBpbml0PzogYm9vbGVhbikge1xuXG4gICAgICAgIGNvbnN0IGNvbmZpZzogSUNsYXNzQ29uZiA9IHtcbiAgICAgICAgICAgIGludGVyZmFjZTogXCJ3bGFuMFwiLFxuICAgICAgICAgICAgd3Bhc3VwcGxpY2FudF9wYXRoOiBcIi9ldGMvd3BhX3N1cHBsaWNhbnQvd3BhX3N1cHBsaWNhbnQuY29uZlwiLFxuICAgICAgICAgICAgcmVkaXJlY3Q6IHRydWUsXG4gICAgICAgICAgICBob3N0YXBkOiB7IGludGVyZmFjZTogXCJ3bGFuMFwiLCB3cGFfcGFzc3BocmFzZTogZmFsc2UsIHNzaWQ6IFwiaGFwZDExMVwiIH0sXG4gICAgICAgICAgICBkbnNtYXNxOiB7IGludGVyZmFjZTogXCJ3bGFuMFwiIH0sXG4gICAgICAgICAgICBpbml0OiBmYWxzZVxuICAgICAgICB9O1xuXG5cbiAgICAgICAgbWVyZ2UoY29uZmlnLCBvcHRpb25zKVxuXG4gICAgICAgIGlmIChjb25maWcuaW50ZXJmYWNlICE9PSAnYXV0bycgJiYgKCFvcHRpb25zIHx8ICFvcHRpb25zLmhvc3RhcGQgfHwgIW9wdGlvbnMuaG9zdGFwZC5pbnRlcmZhY2UpICYmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5kbnNtYXNxIHx8ICFvcHRpb25zLmRuc21hc3EuaW50ZXJmYWNlKSkge1xuICAgICAgICAgICAgY29uZmlnLmhvc3RhcGQuaW50ZXJmYWNlID0gY29uZmlnLmludGVyZmFjZVxuICAgICAgICAgICAgY29uZmlnLmRuc21hc3EuaW50ZXJmYWNlID0gY29uZmlnLmludGVyZmFjZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXRoRXhpc3RzLnN5bmMoJy9ldGMvZGVmYXVsdC9ob3N0YXBkJykpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdubyBkZWZhdWx0IGNvbmYgZmlsZSB3YXMgZm91bmRlZCBmb3IgaG9zdGFwZCcpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjb25maWcuaG9zdGFwZC5zc2lkKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignTm8gc3NpZCB3YXMgcHJvdmlkZWQnKVxuICAgICAgICB9XG4gICAgICAgIGlmICghY29uZmlnLmhvc3RhcGQud3BhX3Bhc3NwaHJhc2UpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdObyB3cGFfcGFzc3BocmFzZSB3YXMgcHJvdmlkZWQnKVxuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXIoY29uZmlnLndwYXN1cHBsaWNhbnRfcGF0aClcblxuXG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuXG4gICAgICAgIHRoaXMuZG5zbWFzcSA9IG5ldyBkbnNtYXNxY29uZihjb25maWcuZG5zbWFzcSk7XG5cbiAgICAgICAgaWYgKGluaXQpIHtcbiAgICAgICAgICAgIGhvc3RhcGRjb25mKGNvbmZpZy5ob3N0YXBkKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnaG9zdGFwZCBpcyBub3cgY29uZmlndXJlZCcpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgIH07XG5cbiAgICBob3N0KGU/OiBhbnkpIHtcbiAgICAgICAgY29uc3QgdGhhdCA9IHRoaXNcbiAgICAgICAgbGV0IGRuc21hc3EgPSB0aGlzLmRuc21hc3E7XG4gICAgICAgIGxldCBob3N0SXAgPSBkbnNtYXNxLmhvc3RJcDtcbiAgICAgICAgbGV0IGNtZCA9ICdpZmNvbmZpZyAnICsgdGhpcy5jb25maWcuaW50ZXJmYWNlICsgJyBkb3duICYmIHNsZWVwIDIgOyBwa2lsbCB3cGFfc3VwcGxpY2FudCAmJiBzeXN0ZW1jdGwgcmVzdGFydCBob3N0YXBkIDsgc3lzdGVtY3RsIHJlc3RhcnQgZG5zbWFzcSAmJiBpZmNvbmZpZyAnICsgdGhpcy5jb25maWcuaW50ZXJmYWNlICsgJyAnICsgaG9zdElwICsgJyBuZXRtYXNrIDI1NS4yNTUuMjU1LjAgdXAgJiYgc2xlZXAgNSc7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxib29sZWFuPihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBkbnNtYXNxLmhvc3QoKS50aGVuKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIGV4ZWMoY21kKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZXhlYygnaXB0YWJsZXMgLXQgbmF0IC1BIFBSRVJPVVRJTkcgLXAgdGNwIC0tZHBvcnQgODAgLWogRE5BVCAtLXRvLWRlc3RpbmF0aW9uICcgKyBob3N0SXAgKyAnOjgwICYmIGlwdGFibGVzIC10IG5hdCAtQSBQUkVST1VUSU5HIC1wIHRjcCAtLWRwb3J0IDQ0MyAtaiBETkFUIC0tdG8tZGVzdGluYXRpb24gJyArIGhvc3RJcCArICc6ODAnKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQud2lmaW1vZGUgPSBcImhvc3RcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVyYihlcnIsICdlcnJvcicsICdob3N0YXBkX3N3aXRjaCBpcGZpbHRlciBob3N0IHN3aXRjaCcpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICB2ZXJiKGVyciwgJ2Vycm9yJywgJ2hvc3RhcGRfc3dpdGNoIGV4ZWN1dGluZyBob3N0IHN3aXRjaCcpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICB2ZXJiKGVyciwgJ2Vycm9yJywgJ2hvc3RhcGRfc3dpdGNoIGV4ZWN1dGluZyBkbnNtYXNxIGhvc3Qgc3dpdGNoJylcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfTtcblxuXG4gICAgYXAoZT86IGFueSkge1xuICAgICAgICBjb25zdCB0aGF0ID0gdGhpc1xuXG4gICAgICAgIGxldCBkbnNtYXNxID0gdGhpcy5kbnNtYXNxO1xuICAgICAgICBsZXQgaG9zdElwID0gZG5zbWFzcS5ob3N0SXA7XG4gICAgICAgIGxldCBjbWQgPSAnaWZjb25maWcgJyArIHRoaXMuY29uZmlnLmludGVyZmFjZSArICcgZG93biAmJiBzbGVlcCAyIDsgcGtpbGwgd3BhX3N1cHBsaWNhbnQgJiYgc3lzdGVtY3RsIHJlc3RhcnQgaG9zdGFwZCA7IHN5c3RlbWN0bCByZXN0YXJ0IGRuc21hc3EgJiYgaWZjb25maWcgJyArIHRoaXMuY29uZmlnLmludGVyZmFjZSArICcgJyArIGhvc3RJcCArICcgbmV0bWFzayAyNTUuMjU1LjI1NS4wIHVwICYmIGZvciBpIGluICQoIGlwdGFibGVzIC10IG5hdCAtLWxpbmUtbnVtYmVycyAtTCB8IGdyZXAgXlswLTldIHwgYXdrIFxcJ3sgcHJpbnQgJDEgfVxcJyB8IHRhYyApOyBkbyBpcHRhYmxlcyAtdCBuYXQgLUQgUFJFUk9VVElORyAkaTsgZG9uZSdcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPGJvb2xlYW4+KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGRuc21hc3EuYXAoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBleGVjKGNtZCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQud2lmaW1vZGUgPSBcImFwXCI7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSlcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcmIoZXJyLCAnZXJyb3InLCAnaG9zdGFwZF9zd2l0Y2ggZXhlY3V0aW5nIGFwIHN3aXRjaCcpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICB2ZXJiKGVyciwgJ2Vycm9yJywgJ2hvc3RhcGRfc3dpdGNoIGV4ZWN1dGluZyBkbnNtYXNxIGJlZm9yZSBhcCBzd2l0Y2gnKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9O1xuXG4gICAgY2xpZW50KHRlc3RuZXR3PzogYm9vbGVhbiwgdGVzdGludD86IGJvb2xlYW4pIHtcbiAgICAgICAgY29uc3QgdGhhdCA9IHRoaXNcblxuICAgICAgICBjb25zdCBkZXYgPSB0aGlzLmNvbmZpZy5pbnRlcmZhY2U7XG4gICAgICAgIGxldCBkcml2ZXI6IHN0cmluZztcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmhvc3RhcGQuZHJpdmVyID09PSAnbmw4MDIxMScpIHtcbiAgICAgICAgICAgIGRyaXZlciA9ICdubDgwMjExJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRyaXZlciA9ICd3ZXh0JztcbiAgICAgICAgfVxuICAgICAgICBsZXQgY21kID0gJ2lmY29uZmlnICcgKyBkZXYgKyAnIGRvd24gJiYgc2xlZXAgMiA7IHBraWxsIHdwYV9zdXBwbGljYW50IDsgIGRoY2xpZW50IC1yICcgKyBkZXYgKyAnIDsgc3lzdGVtY3RsIHN0b3AgaG9zdGFwZCA7IHN5c3RlbWN0bCBzdG9wIGRuc21hc3EgOyBzbGVlcCAyOyBpZmNvbmZpZyAnICsgZGV2ICsgJyB1cCAmJiB3cGFfc3VwcGxpY2FudCAtQiAtaSAnICsgZGV2ICsgJyAtYyAnICsgdGhpcy5jb25maWcud3Bhc3VwcGxpY2FudF9wYXRoICsgJyAtRCAnICsgZHJpdmVyICsgJyAmJiBkaGNsaWVudCAnICsgZGV2ICsgJyAmJiBmb3IgaSBpbiAkKCBpcHRhYmxlcyAtdCBuYXQgLS1saW5lLW51bWJlcnMgLUwgfCBncmVwIF5bMC05XSB8IGF3ayBcXCd7IHByaW50ICQxIH1cXCcgfCB0YWMgKTsgZG8gaXB0YWJsZXMgLXQgbmF0IC1EIFBSRVJPVVRJTkcgJGk7IGRvbmU7IHNsZWVwIDEwJztcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8Ym9vbGVhbj4oZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICBleGVjKGNtZCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhhdC53aWZpbW9kZSA9IFwiY2xpZW50XCI7XG5cbiAgICAgICAgICAgICAgICBpZiAodGVzdG5ldHcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVzdGNvbm4oZGV2LCB0ZXN0aW50KS50aGVuKGZ1bmN0aW9uIChhbnN3ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYW5zd2VyKVxuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdmVyYihlcnIsICd3YXJuJywgJ2hvc3RhcGRfc3dpdGNoIGV4ZWMnKVxuICAgICAgICAgICAgICAgIGlmICh0ZXN0bmV0dykge1xuICAgICAgICAgICAgICAgICAgICB0ZXN0Y29ubihkZXYsIHRlc3RpbnQpLnRoZW4oZnVuY3Rpb24gKGFuc3dlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShhbnN3ZXIpXG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG5cblxuICAgICAgICB9KVxuXG4gICAgfTtcbiAgICBsaXN0d2lmaWNsaWVudHMoKTogUHJvbWlzZTxJV2lmaUNsaWVudFtdPiB7XG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxJV2lmaUNsaWVudFtdPihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBpZiAodGhhdC53aWZpbW9kZSA9PT0gJ2hvc3QnIHx8IHRoYXQud2lmaW1vZGUgPT09ICdhcCcpIHtcbiAgICAgICAgICAgICAgICBsaXN0d2lmaWNsaWVudHModGhhdC5jb25maWcuaW50ZXJmYWNlKS50aGVuKChhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYSlcbiAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCd3aWZpbW9kZSBpcyAnICsgdGhhdC53aWZpbW9kZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cblxuXG59XG5cblxuXG5cblxuXG4iXX0=
