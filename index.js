"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Promise = require("bluebird");
var pathExists = require("path-exists");
var dnsmasqconf = require("dnsmasq-conf");
var json_add_1 = require("json-add");
var promise_test_connection_1 = require('promise-test-connection');
var wpasupplicant_manager_1 = require('wpasupplicant-manager');
var netw_1 = require("netw");
var verb = require('verbo');
var exec = require('promised-exec');
var hostapdjs_1 = require("hostapdjs");
function testconn(d, testint) {
    return new Promise(function (resolve, reject) {
        netw_1.default().then(function (n) {
            var dev = false;
            var ip = false;
            for (var ns = 0; ns < n.length; ns++) {
                if (n[ns].interface == d) {
                    dev = d;
                    if (n[ns].ip) {
                        ip = n[ns].ip;
                    }
                }
            }
            if (!dev) {
                reject('no interface');
            }
            else if (!ip) {
                reject(dev + ' can\'t get an ip address');
            }
            else {
                if (testint) {
                    promise_test_connection_1.default().then(function () {
                        resolve(true);
                    }).catch(function (err) {
                        reject(err);
                    });
                }
                else {
                    console.log("no internet test");
                    resolve(true);
                }
            }
        }).catch(function (err) {
            reject('netw' + err);
        });
    });
}
;
;
;
;
;
;
;
var HostapdSwitch = (function (_super) {
    __extends(HostapdSwitch, _super);
    function HostapdSwitch(options, init) {
        var config = {
            interface: "wlan0",
            wpasupplicant_path: "/etc/wpa_supplicant/wpa_supplicant.conf",
            redirect: true,
            hostapd: { interface: "wlan0", wpa_passphrase: false, ssid: "hapd111" },
            dnsmasq: { interface: "wlan0" },
            init: false
        };
        json_add_1.default(config, options);
        if (!pathExists.sync('/etc/default/hostapd')) {
            throw Error('no default conf file was founded for hostapd');
        }
        if (!config.hostapd.ssid) {
            throw Error('No ssid was provided');
        }
        if (!config.hostapd.wpa_passphrase) {
            throw Error('No wpa_passphrase was provided');
        }
        _super.call(this, config.wpasupplicant_path);
        this.config = config;
        this.dnsmasq = new dnsmasqconf(config.dnsmasq);
        if (init) {
            hostapdjs_1.default(config.hostapd).then(function () {
                console.log('hostapd is now configured');
            });
        }
        ;
    }
    ;
    HostapdSwitch.prototype.host = function (e) {
        var that = this;
        var dnsmasq = this.dnsmasq;
        var hostIp = dnsmasq.hostIp;
        var cmd = 'ifconfig ' + this.config.interface + ' down && sleep 2 ; pkill wpa_supplicant && systemctl restart hostapd ; systemctl restart dnsmasq && ifconfig ' + this.config.interface + ' ' + hostIp + ' netmask 255.255.255.0 up && sleep 5';
        return new Promise(function (resolve, reject) {
            dnsmasq.host().then(function () {
                exec(cmd).then(function () {
                    exec('iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination ' + hostIp + ':80 && iptables -t nat -A PREROUTING -p tcp --dport 443 -j DNAT --to-destination ' + hostIp + ':80').then(function () {
                        that.wifimode = "host";
                        resolve(true);
                    }).catch(function (err) {
                        verb(err, 'error', 'hostapd_switch ipfilter host switch');
                    });
                }).catch(function (err) {
                    verb(err, 'error', 'hostapd_switch executing host switch');
                });
            }).catch(function (err) {
                verb(err, 'error', 'hostapd_switch executing dnsmasq host switch');
            });
        });
    };
    ;
    HostapdSwitch.prototype.ap = function (e) {
        var that = this;
        var dnsmasq = this.dnsmasq;
        var hostIp = dnsmasq.hostIp;
        var cmd = 'ifconfig ' + this.config.interface + ' down && sleep 2 ; pkill wpa_supplicant ; && systemctl restart hostapd ; systemctl restart dnsmasq && ifconfig ' + this.config.interface + ' ' + hostIp + ' netmask 255.255.255.0 up && for i in $( iptables -t nat --line-numbers -L | grep ^[0-9] | awk \'{ print $1 }\' | tac ); do iptables -t nat -D PREROUTING $i; done';
        return new Promise(function (resolve, reject) {
            dnsmasq.ap().then(function () {
                exec(cmd).then(function () {
                    that.wifimode = "ap";
                    resolve(true);
                }).catch(function (err) {
                    verb(err, 'error', 'hostapd_switch executing ap switch');
                });
            }).catch(function (err) {
                verb(err, 'error', 'hostapd_switch executing dnsmasq before ap switch');
            });
        });
    };
    ;
    HostapdSwitch.prototype.client = function (testnetw, testint) {
        var that = this;
        var dev = this.config.interface;
        var driver;
        if (this.config.hostapd.driver === 'nl80211') {
            driver = 'nl80211';
        }
        else {
            driver = 'wext';
        }
        var cmd = 'ifconfig ' + dev + ' down && sleep 2 ; pkill wpa_supplicant ;  dhclient -r ' + dev + ' ; systemctl stop hostapd ; systemctl stop dnsmasq ; sleep 2; ifconfig ' + dev + ' up && wpa_supplicant -B -i ' + dev + ' -c ' + this.config.wpasupplicant_path + ' -D ' + driver + ' && dhclient ' + dev + ' && for i in $( iptables -t nat --line-numbers -L | grep ^[0-9] | awk \'{ print $1 }\' | tac ); do iptables -t nat -D PREROUTING $i; done; sleep 10';
        return new Promise(function (resolve, reject) {
            exec(cmd).then(function () {
                that.wifimode = "client";
                if (testnetw) {
                    testconn(dev, testint).then(function (answer) {
                        resolve(answer);
                    }).catch(function (err) {
                        reject(err);
                    });
                }
                else {
                    resolve(true);
                }
            }).catch(function (err) {
                verb(err, 'warn', 'hostapd_switch exec');
                if (testnetw) {
                    testconn(dev, testint).then(function (answer) {
                        resolve(answer);
                    }).catch(function (err) {
                        reject(err);
                    });
                }
                else {
                    resolve(true);
                }
            });
        });
    };
    ;
    return HostapdSwitch;
}(wpasupplicant_manager_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = HostapdSwitch;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
